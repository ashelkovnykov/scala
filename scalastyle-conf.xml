<!--
If you wish to turn off checking for a section of code, you can put a comment in the source before and after the
section, with the following syntax:

  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on

You can also disable only one rule, by specifying its rule id, as specified in:
  http://www.scalastyle.org/rules-0.7.0.html

  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize

This file is divided into 3 sections:
 (1) rules that are enforced
 (2) rules that should be enforced, but the codebase isn't ready yet, or the scalastyle rule needs more configuration
 (3) rules that are not enforced
-->

<scalastyle>
    <name>Scalastyle standard configuration</name>

    <!-- ================================================================================ -->
    <!--                               rules enforced                                     -->
    <!-- ================================================================================ -->

    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[120]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
            <parameter name="ignoreImports">true</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters><parameter name="maxParameters"><![CDATA[10]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true">
    </check>

    <check customId="nonascii" level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true">
    </check>

    <check customId="println" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">^println$</parameter>
        </parameters>
    </check>

    <check customId="mutablesynchronizedbuffer" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">mutable\.SynchronizedBuffer</parameter>
        </parameters>
    </check>

    <check customId="javaconversions" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">JavaConversions</parameter>
        </parameters>
        <customMessage>
            Instead of importing implicits in scala.collection.JavaConversions._, import
            scala.collection.JavaConverters._ and use .asScala / .asJava methods
        </customMessage>
    </check>

    <check customId="commonslang2" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">org\.apache\.commons\.lang\.</parameter>
        </parameters>
        <customMessage>
            Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead of Commons Lang 2 (package
            org.apache.commons.lang.*)
        </customMessage>
    </check>

    <check customId="extractopt" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">extractOpt</parameter>
        </parameters>
        <customMessage>
            Use Utils.jsonOption(x).map(.extract[T]) instead of .extractOpt[T], as the latter is slower.
        </customMessage>
    </check>

    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COMMA</parameter>
        </parameters>
    </check>

    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">\)\{</parameter>
        </parameters>
    </check>

    <check customId="NoScalaDoc" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">(?m)^(\s*)/[*][*].*$(\r|)\n^\1  [*]</parameter>
        </parameters>
        <customMessage>
            Use Javadoc style indentation for multiline comments
        </customMessage>
    </check>

    <check customId="OmitBracesInCase" level="error" class="org.scalastyle.file.RegexChecker" enabled="false">
        <parameters>
            <parameter name="regex">case[^\n>]*=>\s*\{</parameter>
        </parameters>
    </check>

    <check customId="OverrideJavaCase" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">^Override$</parameter>
        </parameters>
        <customMessage>
            Override modifier should be used instead of @java.lang.Override.
        </customMessage>
    </check>

    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true">
    </check>

    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters><parameter name="maxFileLength">500></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters><parameter name="maxTypes">30</parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters><parameter name="maximum">10</parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters><parameter name="maxLength">50</parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters><parameter name="maxMethods"><![CDATA[30]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
        <parameters>
            <parameter name="ignore">
            </parameter>
        </parameters>
    </check>

    <!-- ================================================================================ -->
    <!--                                  rules planned                                   -->
    <!-- ================================================================================ -->

    <!-- ================================================================================ -->
    <!--                               rules not enforced                                 -->
    <!-- ================================================================================ -->

    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="false">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="false">
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="false">
    </check>

    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="false">
        <parameters><parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false">
    </check>

    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false">
    </check>

</scalastyle>
